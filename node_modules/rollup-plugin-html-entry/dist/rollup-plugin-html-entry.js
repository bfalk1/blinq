'use strict';

var fs = require('fs');
var path = require('path');
var matched = require('matched');
var htmlImportsVisitor = require('html-imports-visitor');
var parse5 = require('parse5');
var dom5 = require('dom5');

var mkdir = (path$1) => {
  try {
    fs.readdirSync(path$1);
  } catch (err) {
    mkdir(path.dirname(path$1));
    fs.mkdirSync(path$1);
  }
};

var writeFileEx = (path, doc) => (res, rej) => {
  fs.writeFile(path, parse5.serialize(doc), (err) => err ? rej(err) : res());
};

var mkdirEx = (path) => (res, rej) => {
  try {
    mkdir(path);
    res();
  } catch (err) {
    rej(err);
  }
};

var writeHtmls = (htmls, destPath) => {

  var executors = {};
  for (var filepath in htmls) {
    var destFilepath = path.resolve(destPath, path.relative(process.cwd(), filepath));
    var destDirpath = path.dirname(destFilepath);
    var ex = writeFileEx(destFilepath, htmls[filepath]);
    if (executors[destDirpath]) {
      executors[destDirpath].push(ex);
    } else {
      executors[destDirpath] = [ex];
    }
  }

  return Promise.all(
    Object.keys(executors).map(
      (path) => new Promise(mkdirEx(path)).then(
        Promise.all(
          executors[path].map((ex) => new Promise(ex))
        )
      )
    )
  )
};

var entry = "\0rollup-plugin-html-entry:entry-point";

var index = (config) => {
  var include = "**/*.html";
  var exclude = [];
  var external = [];
  var exporter = (path) => `export * from ${JSON.stringify(path)};`;
  var output = false;

  var configure = (options) => {
    if (typeof options === "string") {
      include = [options];
    } else if (Array.isArray(options)) {
      include = options;
    } else {
      include = options.include || [];
      exclude = options.exclude || [];
      external = options.external || [];
      if (options.exports === false) {
        exporter = (path) => `import ${JSON.stringify(path)};`;
      }
    }

    if (options.output) {
      output = options.output;
    }
  };

  if (config) {
    configure(config);
  }

  var realPaths;
  var virtualPaths;
  var pathsList;
  var htmls;
  var excludeMap;

  var visitor = {

    import(link, ref) {
      var location = ref.location;

      if (excludeMap[location]) {
        // remove <link rel="import"> and avoid entering the doc
        dom5.remove(link);
      }
    },

    enter(document, ref) {
      var path = ref.path;

      htmls[path] = document;
    },

    visit(element, ref) {
      var path = ref.path;
      var index = ref.index;

      realPaths[path] = true;
      var src = dom5.getAttribute(element, "src");
      if (src) {
        if (htmlImportsVisitor.isLocal(src)) {
          pathsList.push(htmlImportsVisitor.resolve(path, src));
          if (output) {
            dom5.remove(element);
          }
        }
      } else {
        // (todo) should avoid possibile collision against real paths
        var virtualPath = `${path}_${index}.js`;
        pathsList.push(virtualPath);
        virtualPaths[virtualPath] = dom5.getTextContent(element);
        if (output) {
          dom5.remove(element);
        }
      }
    }
  };

  var analyze = () => {

    // Reset
    realPaths = {};
    virtualPaths = {};
    pathsList = [];
    htmls = {};
    excludeMap = {};

    var helper = new htmlImportsVisitor.VisitorHelper(visitor, htmlImportsVisitor.predicates.hasTagName("script"));

    if (exclude.length) {
      var excluded = matched.sync(exclude, { realpath: true });
      for (var i in excluded) {
        excludeMap[excluded[i]] = true;
      }
    }

    if (external.length) {
      var omitted = matched.sync(
        external,
        { realpath: true }
      );
      for (var i$1 in omitted) {
        helper.omit(omitted[i$1]);
      }
    }

    if (include.length) {
      var included = matched.sync(
        include.concat(exclude.map((pattern) => `!${pattern}`))
               .concat(external.map((pattern) => `!${pattern}`)),
        { realpath: true }
      );
      for (var i$2 in included) {
        helper.enter(included[i$2]);
      }
    }
  };

  return {
    options(options) {
      if (options.input && options.input !== entry) {
        configure(options.input);
      }
      options.input = entry;
      analyze();
    },

    resolveId(id) {
      if (id === entry) {
        return entry
      }

      if (id in virtualPaths) {
        return id
      }
    },

    load(id) {
      if (id === entry) {
        if (!pathsList.length) {
          return Promise.resolve("")
        }
        return new Promise(
          (res) => res(pathsList.map(exporter).join("\n"))
        )
      }

      if (id in virtualPaths) {
        return virtualPaths[id]
      }
    },

    generateBundle() {
      if (output) {
        return writeHtmls(htmls, output)
      }
    }
  }

};

module.exports = index;
