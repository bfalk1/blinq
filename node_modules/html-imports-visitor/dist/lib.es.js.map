{"version":3,"file":"lib.es.js","sources":["../src/path.js","../src/VisitorHelper.js"],"sourcesContent":["import { resolve as resolvePath, dirname } from \"path\"\nimport { readFileSync, existsSync } from \"fs\"\n\nconst isAbsoluteRegex = new RegExp(\"^([a-z]+://|//)\", \"i\")\n\nexport const resolve = (basePath, href) => resolvePath(dirname(basePath), href)\nexport const isLocal = (href) => href && !isAbsoluteRegex.test(href)\nexport const load = (file) => readFileSync(file, \"utf8\")\nexport const fileExists = (path) => existsSync(path)\n","import { parse } from \"parse5\"\nimport { predicates as dom5predicates, getAttribute, queryAll } from \"dom5\"\nimport { resolve, load, isLocal as isLocalPath, fileExists } from \"./path.js\"\nimport { resolve as resolvePath } from \"path\"\n\nexport const predicates = dom5predicates\n\n/**\n * Traverse the spanning tree of the HTML Imports graph starting from a given location\n *\n *\n * The linking structure of import link lists forms a directed graph.\n * Each node of the graph is a document and its edge is a link.\n * Branches are intended to form a spanning tree of the graph.\n * This tree gives the deterministic order of the script execution.\n * @see https://www.w3.org/TR/html-imports/#import-dependent\n *\n * @param {Object} visitor A visitor object that will be used for traversal\n * @param {string} path The path to start from\n * @param {Predicate} predicate A predicate to select HTML elements to be visited\n * @param {Object} [importMap] The set of traversed imports\n * @param {HTMLLinkElement} [link] The current <link rel=\"import\"> element\n * @return {void}\n */\nconst traverse = (visitor, path, predicate, importMap = {}, link = null) => {\n\n  // If location is already in the import map\n  // OR <link rel=\"import\"> has been removed by visitor\n  // then STOP\n  if (importMap[path] || link && !link.parentNode) {\n    return\n  }\n\n  // The imported document\n  const document = parse(load(path))\n  importMap[path] = document\n\n  visitor.enter(document, { path, link })\n\n  const elements = queryAll(document, predicate)\n  let index = 0\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i]\n\n    const linkHref = element.tagName === \"link\" &&\n      String(getAttribute(element, \"rel\")).toLowerCase() === \"import\" &&\n      getAttribute(element, \"href\")\n\n    if (linkHref) {\n      const isLocal = isLocalPath(linkHref)\n      const location = isLocal ? resolve(path, linkHref) : linkHref\n      const isExists = isLocal && fileExists(location)\n      visitor.import(element, { path, location, isLocal, isExists })\n      // Exclude remote locations and non-existing files\n      if (isExists) {\n        // Recursively traverse any found import locations\n        traverse(visitor, location, predicate, importMap, element)\n      }\n    } else {\n      visitor.visit(element, { path, index })\n      index++\n    }\n  }\n}\n\n\nconst { AND, OR, hasTagName, hasAttrValue, hasAttr } = predicates\n\n// Query selector for link[rel=import]\nconst htmlImportPredicate = AND( // eslint-disable-line new-cap\n    hasTagName(\"link\"),\n    hasAttrValue(\"rel\", \"import\"),\n    hasAttr(\"href\")\n)\n\nconst noopVisitor = {\n  import() {},\n  enter() {},\n  visit() {}\n}\n\nexport class VisitorHelper {\n\n  /**\n   * Constructor\n   *\n   * @param {Object} visitor A visitor object that will be used for traversal\n   * @param {(Predicate|Predicate[])} [predicatesList] An array of predicates to select elements\n   */\n  constructor(visitor, predicatesList) {\n    if (predicatesList) {\n      this.predicate = predicatesList instanceof Array ?\n        OR(htmlImportPredicate, ...predicatesList) : // eslint-disable-line new-cap\n        OR(htmlImportPredicate, predicatesList) // eslint-disable-line new-cap\n    } else {\n      this.predicate = htmlImportPredicate\n    }\n    this.visitor = Object.assign({}, noopVisitor, visitor)\n    this.importMap = {}\n  }\n\n  /**\n   * Traverse but not visit the spanning tree of the HTML Imports graph from a given entry\n   *\n   * Traversed branches will be omited in following traversals.\n   * If called prior to enter(), branches already traversed by omit() will be not visited again.\n   *\n   * @param {string} entry An HTML file path\n   * @return {VisitorHelper} This\n   */\n  omit(entry) {\n    traverse(noopVisitor, resolvePath(entry), htmlImportPredicate, this.importMap)\n    return this\n  }\n\n  /**\n   * Traverse and visit the spanning tree of the HTML Imports graph from a given entry\n   *\n   * @param {string} entry An HTML file path\n   * @return {VisitorHelper} This\n   */\n  enter(entry) {\n    traverse(this.visitor, resolvePath(entry), this.predicate, this.importMap)\n    return this\n  }\n\n}\n\nexport default VisitorHelper\n"],"names":["resolve","resolvePath","path","predicates","dom5predicates","isLocal","isLocalPath"],"mappings":"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"}